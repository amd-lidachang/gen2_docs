<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.7" xml:lang="en-US">
  <compounddef id="classvart_1_1_infer_result" kind="class" language="C++" prot="public">
    <compoundname>vart::InferResult</compoundname>
    <basecompoundref prot="public" virt="non-virtual">std::enable_shared_from_this&lt; InferResult &gt;</basecompoundref>
    <includes local="no">vart_inferresult.hpp</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classvart_1_1_infer_result_1ae3db73e4ded07ddb263a83dacc34656d" prot="private" static="no" mutable="no">
        <type>std::shared_ptr&lt; InferResultImplBase &gt;</type>
        <definition>std::shared_ptr&lt;InferResultImplBase&gt; pimpl</definition>
        <argsstring></argsstring>
        <name>pimpl</name>
        <qualifiedname>vart::InferResult::pimpl</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cppdoc/vart_inferresult.hpp" line="164" column="19" bodyfile="cppdoc/vart_inferresult.hpp" bodystart="164" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classvart_1_1_infer_result_1a05ec63d7591a8d42059641f43098ee2e" prot="private" static="no" mutable="no">
        <type>std::weak_ptr&lt; <ref refid="classvart_1_1_infer_result" kindref="compound">InferResult</ref> &gt;</type>
        <definition>std::weak_ptr&lt;InferResult&gt; parent</definition>
        <argsstring></argsstring>
        <name>parent</name>
        <qualifiedname>vart::InferResult::parent</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cppdoc/vart_inferresult.hpp" line="165" column="17" bodyfile="cppdoc/vart_inferresult.hpp" bodystart="165" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classvart_1_1_infer_result_1a70b2b84350cba3a2a5d2a0cc5c3dcb6e" prot="private" static="no" mutable="no">
        <type>std::vector&lt; std::shared_ptr&lt; <ref refid="classvart_1_1_infer_result" kindref="compound">InferResult</ref> &gt; &gt;</type>
        <definition>std::vector&lt;std::shared_ptr&lt;InferResult&gt; &gt; children</definition>
        <argsstring></argsstring>
        <name>children</name>
        <qualifiedname>vart::InferResult::children</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cppdoc/vart_inferresult.hpp" line="166" column="15" bodyfile="cppdoc/vart_inferresult.hpp" bodystart="166" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classvart_1_1_infer_result_1a40c75205b74f72f4fe3694680fd28bd2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>InferResult</definition>
        <argsstring>()=delete</argsstring>
        <name>InferResult</name>
        <qualifiedname>vart::InferResult::InferResult</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cppdoc/vart_inferresult.hpp" line="38" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classvart_1_1_infer_result_1a1fccbbb6e028e70c1710a98e9405082b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>InferResult</definition>
        <argsstring>(InferResultType infer_res_type)</argsstring>
        <name>InferResult</name>
        <qualifiedname>vart::InferResult::InferResult</qualifiedname>
        <param>
          <type>InferResultType</type>
          <declname>infer_res_type</declname>
        </param>
        <briefdescription>
<para>InferResult() - Constructor for using supported infer result type implementations. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>infer_res_type</parametername>
</parameternamelist>
<parameterdescription>
<para>Enum class to specify which implementation to instantiate </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cppdoc/vart_inferresult.hpp" line="48" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classvart_1_1_infer_result_1aa08ca11d3c17a20758d9cbc487a0dd44" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>InferResult</definition>
        <argsstring>(std::shared_ptr&lt; InferResultImplBase &gt; ptr)</argsstring>
        <name>InferResult</name>
        <qualifiedname>vart::InferResult::InferResult</qualifiedname>
        <param>
          <type>std::shared_ptr&lt; InferResultImplBase &gt;</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>InferResult() - Constructor for using user defined implementation. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to user&apos;s implementation instance </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cppdoc/vart_inferresult.hpp" line="57" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classvart_1_1_infer_result_1a674d28db944a9bab9e52db6665c39e32" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::shared_ptr&lt; InferResultImplBase &gt; &amp;</type>
        <definition>const std::shared_ptr&lt; InferResultImplBase &gt; &amp; get_pimpl_handle</definition>
        <argsstring>() const</argsstring>
        <name>get_pimpl_handle</name>
        <qualifiedname>vart::InferResult::get_pimpl_handle</qualifiedname>
        <briefdescription>
<para><ref refid="classvart_1_1_infer_result_1a674d28db944a9bab9e52db6665c39e32" kindref="member">get_pimpl_handle()</ref> - Gives pointer to implementation class. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Returns a constant reference of pointer to implementation class. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cppdoc/vart_inferresult.hpp" line="65" column="25"/>
      </memberdef>
      <memberdef kind="function" id="classvart_1_1_infer_result_1ad8890b05f259543474e3943b923eb46d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void transform</definition>
        <argsstring>(InferResScaleInfo &amp;info)</argsstring>
        <name>transform</name>
        <qualifiedname>vart::InferResult::transform</qualifiedname>
        <param>
          <type>InferResScaleInfo &amp;</type>
          <declname>info</declname>
        </param>
        <briefdescription>
<para><ref refid="classvart_1_1_infer_result_1ad8890b05f259543474e3943b923eb46d" kindref="member">transform()</ref> - Scales the infer results by a given scale factor </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>info</parametername>
</parameternamelist>
<parameterdescription>
<para>Scale factor info with which infer results to be scaled.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
Typically, in video pipelines, the original input resolution differs from the resolution of the input to the machine learning model. If we have inference results, like detection from may be 200x200 resolution (input resolution to ML model) and if we want to transform the bounding box results to the original input resolution, which may be 1920x1080. In such cases, one can use this function to transform the bounding box dimensions in the infer results to the resolution of input image. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cppdoc/vart_inferresult.hpp" line="81" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classvart_1_1_infer_result_1a866f3a855bbacec7b88fcfb5194a61bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>InferResultData *</type>
        <definition>InferResultData * get_infer_result</definition>
        <argsstring>()</argsstring>
        <name>get_infer_result</name>
        <qualifiedname>vart::InferResult::get_infer_result</qualifiedname>
        <briefdescription>
<para><ref refid="classvart_1_1_infer_result_1a866f3a855bbacec7b88fcfb5194a61bb" kindref="member">get_infer_result()</ref> - Get inference results for a frame. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Inference result object for the requested frame. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cppdoc/vart_inferresult.hpp" line="89" column="19"/>
      </memberdef>
      <memberdef kind="function" id="classvart_1_1_infer_result_1ad51994f3245cf8e670af433179aee7e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void add_child</definition>
        <argsstring>(std::shared_ptr&lt; InferResult &gt; child)</argsstring>
        <name>add_child</name>
        <qualifiedname>vart::InferResult::add_child</qualifiedname>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classvart_1_1_infer_result" kindref="compound">InferResult</ref> &gt;</type>
          <declname>child</declname>
        </param>
        <briefdescription>
<para><ref refid="classvart_1_1_infer_result_1ad51994f3245cf8e670af433179aee7e1" kindref="member">add_child()</ref> - Add a child to this infer result node. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>child</parametername>
</parameternamelist>
<parameterdescription>
<para>Child node to be added</para>
</parameterdescription>
</parameteritem>
</parameterlist>
User can use this method to build cascade infer result tree by adding child nodes to the previous inference level starting with a dummy root node. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cppdoc/vart_inferresult.hpp" line="101" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classvart_1_1_infer_result_1ad529023061b39b9f69f71a92f57b8cf1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void add_children</definition>
        <argsstring>(std::vector&lt; std::shared_ptr&lt; InferResult &gt; &gt; arg_children)</argsstring>
        <name>add_children</name>
        <qualifiedname>vart::InferResult::add_children</qualifiedname>
        <param>
          <type>std::vector&lt; std::shared_ptr&lt; <ref refid="classvart_1_1_infer_result" kindref="compound">InferResult</ref> &gt; &gt;</type>
          <declname>arg_children</declname>
        </param>
        <briefdescription>
<para><ref refid="classvart_1_1_infer_result_1ad529023061b39b9f69f71a92f57b8cf1" kindref="member">add_children()</ref> - Add all children at once. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>arg_children</parametername>
</parameternamelist>
<parameterdescription>
<para>Child nodes to be added</para>
</parameterdescription>
</parameteritem>
</parameterlist>
User can use this method to add all children at once. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cppdoc/vart_inferresult.hpp" line="111" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classvart_1_1_infer_result_1a427e8a919b8a5e2b3fd01b5f902a4663" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::shared_ptr&lt; <ref refid="classvart_1_1_infer_result" kindref="compound">InferResult</ref> &gt; &gt;</type>
        <definition>std::vector&lt; std::shared_ptr&lt; InferResult &gt; &gt; get_children</definition>
        <argsstring>()</argsstring>
        <name>get_children</name>
        <qualifiedname>vart::InferResult::get_children</qualifiedname>
        <briefdescription>
<para><ref refid="classvart_1_1_infer_result_1a427e8a919b8a5e2b3fd01b5f902a4663" kindref="member">get_children()</ref> - Returns all children of the node. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>vector of child nodes. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cppdoc/vart_inferresult.hpp" line="119" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classvart_1_1_infer_result_1add6c64e161fe43bcc67ce02ebb4aba3d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classvart_1_1_infer_result" kindref="compound">InferResult</ref> &gt;</type>
        <definition>std::shared_ptr&lt; InferResult &gt; get_parent</definition>
        <argsstring>()</argsstring>
        <name>get_parent</name>
        <qualifiedname>vart::InferResult::get_parent</qualifiedname>
        <briefdescription>
<para><ref refid="classvart_1_1_infer_result_1add6c64e161fe43bcc67ce02ebb4aba3d" kindref="member">get_parent()</ref> - Returns parent of the given inference result node. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Parent result node. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cppdoc/vart_inferresult.hpp" line="127" column="19"/>
      </memberdef>
      <memberdef kind="function" id="classvart_1_1_infer_result_1a8ca15c7b7564796d888f207babb92636" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classvart_1_1_infer_result" kindref="compound">InferResult</ref> &gt;</type>
        <definition>std::shared_ptr&lt; InferResult &gt; get_root</definition>
        <argsstring>()</argsstring>
        <name>get_root</name>
        <qualifiedname>vart::InferResult::get_root</qualifiedname>
        <briefdescription>
<para><ref refid="classvart_1_1_infer_result_1a8ca15c7b7564796d888f207babb92636" kindref="member">get_root()</ref> - Returns root of the given inference result node. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Root result node. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cppdoc/vart_inferresult.hpp" line="135" column="19"/>
      </memberdef>
      <memberdef kind="function" id="classvart_1_1_infer_result_1a956fdbf7b90b96e8488df6d29594a64c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void traverse</definition>
        <argsstring>(const std::function&lt; void(std::shared_ptr&lt; InferResult &gt;, void *)&gt; &amp;callback, TraversalOrder order, void *user_data)</argsstring>
        <name>traverse</name>
        <qualifiedname>vart::InferResult::traverse</qualifiedname>
        <param>
          <type>const std::function&lt; void(std::shared_ptr&lt; <ref refid="classvart_1_1_infer_result" kindref="compound">InferResult</ref> &gt;, void *)&gt; &amp;</type>
          <declname>callback</declname>
        </param>
        <param>
          <type>TraversalOrder</type>
          <declname>order</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>user_data</declname>
        </param>
        <briefdescription>
<para><ref refid="classvart_1_1_infer_result_1a956fdbf7b90b96e8488df6d29594a64c" kindref="member">traverse()</ref> - Traverse through the tree nodes in a given order. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>User callback function to be called for each node as per the order chosen.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>order</parametername>
</parameternamelist>
<parameterdescription>
<para>Order in which the tree nodes to be traversed.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_data</parametername>
</parameternamelist>
<parameterdescription>
<para>User data to be passed to the callback function. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cppdoc/vart_inferresult.hpp" line="150" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classvart_1_1_infer_result_1a259d3bdaa2c3b008e26cb4c500aad0a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t get_depth</definition>
        <argsstring>()</argsstring>
        <name>get_depth</name>
        <qualifiedname>vart::InferResult::get_depth</qualifiedname>
        <briefdescription>
<para><ref refid="classvart_1_1_infer_result_1a259d3bdaa2c3b008e26cb4c500aad0a1" kindref="member">get_depth()</ref> - Returns depth of the current node </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Depth of the current node. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cppdoc/vart_inferresult.hpp" line="161" column="10"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>This module is used to represent inference results. </para>
    </briefdescription>
    <detaileddescription>
<para>Presently, the default supported types include classification and detection. Users can integrate new types by overriding base class methods to incorporate custom inference results. For additional information please check API documentation. </para>
    </detaileddescription>
    <location file="cppdoc/vart_inferresult.hpp" line="36" column="1" bodyfile="cppdoc/vart_inferresult.hpp" bodystart="36" bodyend="167"/>
    <listofallmembers>
      <member refid="classvart_1_1_infer_result_1ad51994f3245cf8e670af433179aee7e1" prot="public" virt="non-virtual"><scope>vart::InferResult</scope><name>add_child</name></member>
      <member refid="classvart_1_1_infer_result_1ad529023061b39b9f69f71a92f57b8cf1" prot="public" virt="non-virtual"><scope>vart::InferResult</scope><name>add_children</name></member>
      <member refid="classvart_1_1_infer_result_1a70b2b84350cba3a2a5d2a0cc5c3dcb6e" prot="private" virt="non-virtual"><scope>vart::InferResult</scope><name>children</name></member>
      <member refid="classvart_1_1_infer_result_1a427e8a919b8a5e2b3fd01b5f902a4663" prot="public" virt="non-virtual"><scope>vart::InferResult</scope><name>get_children</name></member>
      <member refid="classvart_1_1_infer_result_1a259d3bdaa2c3b008e26cb4c500aad0a1" prot="public" virt="non-virtual"><scope>vart::InferResult</scope><name>get_depth</name></member>
      <member refid="classvart_1_1_infer_result_1a866f3a855bbacec7b88fcfb5194a61bb" prot="public" virt="non-virtual"><scope>vart::InferResult</scope><name>get_infer_result</name></member>
      <member refid="classvart_1_1_infer_result_1add6c64e161fe43bcc67ce02ebb4aba3d" prot="public" virt="non-virtual"><scope>vart::InferResult</scope><name>get_parent</name></member>
      <member refid="classvart_1_1_infer_result_1a674d28db944a9bab9e52db6665c39e32" prot="public" virt="non-virtual"><scope>vart::InferResult</scope><name>get_pimpl_handle</name></member>
      <member refid="classvart_1_1_infer_result_1a8ca15c7b7564796d888f207babb92636" prot="public" virt="non-virtual"><scope>vart::InferResult</scope><name>get_root</name></member>
      <member refid="classvart_1_1_infer_result_1a40c75205b74f72f4fe3694680fd28bd2" prot="public" virt="non-virtual"><scope>vart::InferResult</scope><name>InferResult</name></member>
      <member refid="classvart_1_1_infer_result_1a1fccbbb6e028e70c1710a98e9405082b" prot="public" virt="non-virtual"><scope>vart::InferResult</scope><name>InferResult</name></member>
      <member refid="classvart_1_1_infer_result_1aa08ca11d3c17a20758d9cbc487a0dd44" prot="public" virt="non-virtual"><scope>vart::InferResult</scope><name>InferResult</name></member>
      <member refid="classvart_1_1_infer_result_1a05ec63d7591a8d42059641f43098ee2e" prot="private" virt="non-virtual"><scope>vart::InferResult</scope><name>parent</name></member>
      <member refid="classvart_1_1_infer_result_1ae3db73e4ded07ddb263a83dacc34656d" prot="private" virt="non-virtual"><scope>vart::InferResult</scope><name>pimpl</name></member>
      <member refid="classvart_1_1_infer_result_1ad8890b05f259543474e3943b923eb46d" prot="public" virt="non-virtual"><scope>vart::InferResult</scope><name>transform</name></member>
      <member refid="classvart_1_1_infer_result_1a956fdbf7b90b96e8488df6d29594a64c" prot="public" virt="non-virtual"><scope>vart::InferResult</scope><name>traverse</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
