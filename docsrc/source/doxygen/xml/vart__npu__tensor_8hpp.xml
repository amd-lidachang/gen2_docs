<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="vart__npu__tensor_8hpp" kind="file" language="C++">
    <compoundname>vart_npu_tensor.hpp</compoundname>
    <includes local="no">cstdint</includes>
    <includes local="no">iostream</includes>
    <includes local="no">memory</includes>
    <includes local="no">string</includes>
    <includes local="no">unordered_map</includes>
    <includes local="no">vector</includes>
    <includedby refid="vart__runner__factory_8hpp" local="yes">vart_runner_factory.hpp</includedby>
    <incdepgraph>
      <node id="1">
        <label>vart_npu_tensor.hpp</label>
        <link refid="vart__npu__tensor_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>cstdint</label>
      </node>
      <node id="3">
        <label>iostream</label>
      </node>
      <node id="4">
        <label>memory</label>
      </node>
      <node id="5">
        <label>string</label>
      </node>
      <node id="6">
        <label>unordered_map</label>
      </node>
      <node id="7">
        <label>vector</label>
      </node>
    </incdepgraph>
    <innerclass refid="structvart_1_1_npu_tensor_info" prot="public">vart::NpuTensorInfo</innerclass>
    <innerclass refid="classvart_1_1_npu_tensor" prot="public">vart::NpuTensor</innerclass>
    <innernamespace refid="namespacevart">vart</innernamespace>
    <sectiondef kind="enum">
      <memberdef kind="enum" id="vart__npu__tensor_8hpp_1ad8ed01ff3ff33333d8e19db4d2818bb6" prot="public" static="no" strong="yes">
        <type></type>
        <name>DataType</name>
        <qualifiedname>vart::DataType</qualifiedname>
        <enumvalue id="vart__npu__tensor_8hpp_1ad8ed01ff3ff33333d8e19db4d2818bb6a696b031073e74bf2cb98e5ef201d4aa3" prot="public">
          <name>UNKNOWN</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="vart__npu__tensor_8hpp_1ad8ed01ff3ff33333d8e19db4d2818bb6aee9d73311ff0658494edfff14c3ec1e3" prot="public">
          <name>INT8</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="vart__npu__tensor_8hpp_1ad8ed01ff3ff33333d8e19db4d2818bb6aecfc091ed2a607335524c8389cfa41b5" prot="public">
          <name>UINT8</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="vart__npu__tensor_8hpp_1ad8ed01ff3ff33333d8e19db4d2818bb6a5f90af42814c0a419d715d43ae54fd7a" prot="public">
          <name>INT16</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="vart__npu__tensor_8hpp_1ad8ed01ff3ff33333d8e19db4d2818bb6a48d8f1a723d44ff4a87db1bb6c551c62" prot="public">
          <name>UINT16</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="vart__npu__tensor_8hpp_1ad8ed01ff3ff33333d8e19db4d2818bb6af656bbf613964dcf710b771b0918ab30" prot="public">
          <name>BF16</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="vart__npu__tensor_8hpp_1ad8ed01ff3ff33333d8e19db4d2818bb6aa4bf99d6945c25077fd6660d536af8a0" prot="public">
          <name>FP16</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="vart__npu__tensor_8hpp_1ad8ed01ff3ff33333d8e19db4d2818bb6a967d280b5c16d95f2947647dd2ca6cc2" prot="public">
          <name>FLOAT32</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Enumerates the supported data types for tensors in the VART API. </para>
        </briefdescription>
        <detaileddescription>
<para>This enum defines the various data types that can be used to represent tensor elements. It includes integer and floating-point formats, as well as specialized types such as BF16.</para>
<para><itemizedlist>
<listitem><para>UNKNOWN: Unknown data type.</para>
</listitem><listitem><para>INT8: 8-bit signed integer.</para>
</listitem><listitem><para>UINT8: 8-bit unsigned integer.</para>
</listitem><listitem><para>INT16: 16-bit signed integer.</para>
</listitem><listitem><para>UINT16: 16-bit unsigned integer.</para>
</listitem><listitem><para>BF16: 16-bit Brain Floating Point format.</para>
</listitem><listitem><para>FP16: 16-bit floating point.</para>
</listitem><listitem><para>FLOAT32: 32-bit floating point. </para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cppdoc/vart_npu_tensor.hpp" line="45" column="1" bodyfile="cppdoc/vart_npu_tensor.hpp" bodystart="45" bodyend="54"/>
      </memberdef>
      <memberdef kind="enum" id="vart__npu__tensor_8hpp_1a8206a04f26f57965d9cb369acafa33d7" prot="public" static="no" strong="yes">
        <type></type>
        <name>MemoryLayout</name>
        <qualifiedname>vart::MemoryLayout</qualifiedname>
        <enumvalue id="vart__npu__tensor_8hpp_1a8206a04f26f57965d9cb369acafa33d7a696b031073e74bf2cb98e5ef201d4aa3" prot="public">
          <name>UNKNOWN</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="vart__npu__tensor_8hpp_1a8206a04f26f57965d9cb369acafa33d7a9871f9b486513e716ce74bf6363efb21" prot="public">
          <name>NHW</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="vart__npu__tensor_8hpp_1a8206a04f26f57965d9cb369acafa33d7ad066db54b89b0912e7e7c6da51e2da51" prot="public">
          <name>NHWC</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="vart__npu__tensor_8hpp_1a8206a04f26f57965d9cb369acafa33d7a6b99f356fe3b30a2a850b5ea897c289f" prot="public">
          <name>NCHW</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="vart__npu__tensor_8hpp_1a8206a04f26f57965d9cb369acafa33d7a471afb8c5bc3825e0c0bc64a0a23fb53" prot="public">
          <name>NHWC4</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="vart__npu__tensor_8hpp_1a8206a04f26f57965d9cb369acafa33d7a384d83fdd6181e8fe719f67083039618" prot="public">
          <name>NC4HW4</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="vart__npu__tensor_8hpp_1a8206a04f26f57965d9cb369acafa33d7a3993b6164e2f8d94185e27fdf9624014" prot="public">
          <name>NC8HW8</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="vart__npu__tensor_8hpp_1a8206a04f26f57965d9cb369acafa33d7a1ba356ddb38e75832d291d2827ff3fb9" prot="public">
          <name>HCWNC4</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="vart__npu__tensor_8hpp_1a8206a04f26f57965d9cb369acafa33d7a8890afe61b88d400ded8f14577178339" prot="public">
          <name>HCWNC8</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="vart__npu__tensor_8hpp_1a8206a04f26f57965d9cb369acafa33d7ac942dc2a9f958acddc67e11472d3ca0b" prot="public">
          <name>GENERIC</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Enumerates the supported memory layouts for tensors in the VART API. </para>
        </briefdescription>
        <detaileddescription>
<para>This enum defines the various memory layouts that can be used to represent tensor data. It includes formats such as NHWC, NCHW, and others that specify how tensor dimensions are organized in memory.</para>
<para><itemizedlist>
<listitem><para>UNKNOWN: Unknown memory layout.</para>
</listitem><listitem><para>NHW: Batch, Height, Width.</para>
</listitem><listitem><para>NHWC: Batch, Height, Width, Channels (packed format).</para>
</listitem><listitem><para>NCHW: Batch, Channels, Height, Width (planar format).</para>
</listitem><listitem><para>NHWC4: Batch, Height, Width, Channel groups of 4 (e.g RGBA).</para>
</listitem><listitem><para>NC4HW4: Batch, Channels / 4, Height, Width, Channel groups of 4.</para>
</listitem><listitem><para>NC8HW8: Batch, Channels / 8, Height, Width, Channel groups of 8.</para>
</listitem><listitem><para>HCWNC4: Height, Channels / 4, Width, Batch, Channel groups of 4.</para>
</listitem><listitem><para>HCWNC8: Height, Channels / 8, Width, Batch, Channel groups of 8.</para>
</listitem><listitem><para>GENERIC: Generic layout. See <ref refid="structvart_1_1_npu_tensor_info_1ae4a44cd3721e0c607925c4fb88e93360" kindref="member">NpuTensorInfo::memory_layout_order</ref> for more info. </para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cppdoc/vart_npu_tensor.hpp" line="76" column="1" bodyfile="cppdoc/vart_npu_tensor.hpp" bodystart="76" bodyend="87"/>
      </memberdef>
      <memberdef kind="enum" id="vart__npu__tensor_8hpp_1a462bfa9dfea81692463ecb192183dd01" prot="public" static="no" strong="yes">
        <type></type>
        <name>MemoryType</name>
        <qualifiedname>vart::MemoryType</qualifiedname>
        <enumvalue id="vart__npu__tensor_8hpp_1a462bfa9dfea81692463ecb192183dd01a696b031073e74bf2cb98e5ef201d4aa3" prot="public">
          <name>UNKNOWN</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="vart__npu__tensor_8hpp_1a462bfa9dfea81692463ecb192183dd01ae10b6ab6a278644ce40631f62f360b6d" prot="public">
          <name>DEVICE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="vart__npu__tensor_8hpp_1a462bfa9dfea81692463ecb192183dd01ab9361011891280a44d85b967739cc6a5" prot="public">
          <name>HOST</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Enumerates the types of memory used for tensors in the VART API. </para>
        </briefdescription>
        <detaileddescription>
<para>This enumeration defines where tensor data resides:<itemizedlist>
<listitem><para>UNKNOWN: Memory type is unspecified.</para>
</listitem><listitem><para>DEVICE: Represents device or physical memory (e.g., <computeroutput>xrt::bo</computeroutput>).</para>
</listitem><listitem><para>HOST: Represents virtual pointer-based memory in system RAM, usually accessed by the CPU. </para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cppdoc/vart_npu_tensor.hpp" line="99" column="1" bodyfile="cppdoc/vart_npu_tensor.hpp" bodystart="99" bodyend="103"/>
      </memberdef>
      <memberdef kind="enum" id="vart__npu__tensor_8hpp_1af96612dbef376e428089af3967a92593" prot="public" static="no" strong="yes">
        <type></type>
        <name>TensorDirection</name>
        <qualifiedname>vart::TensorDirection</qualifiedname>
        <enumvalue id="vart__npu__tensor_8hpp_1af96612dbef376e428089af3967a92593aa84cc046d48610b05c21fd3670d0c829" prot="public">
          <name>INPUT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="vart__npu__tensor_8hpp_1af96612dbef376e428089af3967a92593a50a87f0d71f7221582dad4bf507a0f34" prot="public">
          <name>OUTPUT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Enumerates the supported tensor directions in the VART API. </para>
        </briefdescription>
        <detaileddescription>
<para>This enum defines the various directions that tensors can have in the context of model inference. It includes input and output directions.</para>
<para><itemizedlist>
<listitem><para>INPUT: Input tensor direction.</para>
</listitem><listitem><para>OUTPUT: Output tensor direction. </para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cppdoc/vart_npu_tensor.hpp" line="116" column="1" bodyfile="cppdoc/vart_npu_tensor.hpp" bodystart="116" bodyend="116"/>
      </memberdef>
      <memberdef kind="enum" id="vart__npu__tensor_8hpp_1a687cdefe1dea4afccff21e37ca3ce7c6" prot="public" static="no" strong="yes">
        <type></type>
        <name>TensorType</name>
        <qualifiedname>vart::TensorType</qualifiedname>
        <enumvalue id="vart__npu__tensor_8hpp_1a687cdefe1dea4afccff21e37ca3ce7c6a2b55387dd066c5bac646ac61543d152d" prot="public">
          <name>CPU</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="vart__npu__tensor_8hpp_1a687cdefe1dea4afccff21e37ca3ce7c6a4bd2241a3a809d3cc2bb28e951cc183a" prot="public">
          <name>HW</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Specifies the tensor types supported in the VART API. </para>
        </briefdescription>
        <detaileddescription>
<para>Enumerates the available tensor types:<itemizedlist>
<listitem><para>CPU: Represents tensor metadata from the ONNX model, as defined for standard CPU execution.</para>
</listitem><listitem><para>HW: Corresponds to AMD hardware-specific tensor metadata, formatted for direct execution on AMD AI engines.</para>
</listitem></itemizedlist>
</para>
<para><simplesect kind="note"><para>AMD optimizes its AI engines with unique data formats and memory layouts. As a result, the HW tensor layout and format will typically differ from the CPU tensor representation defined by the ONNX model. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cppdoc/vart_npu_tensor.hpp" line="132" column="1" bodyfile="cppdoc/vart_npu_tensor.hpp" bodystart="132" bodyend="132"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(C)<sp/>2025<sp/>Advanced<sp/>Micro<sp/>Devices,<sp/>Inc.</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;License&quot;);</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdint&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unordered_map&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">vart<sp/>{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="keyword">enum<sp/>class</highlight><highlight class="normal"><sp/>DataType<sp/>{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/>UNKNOWN,</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/>INT8,</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/>UINT8,</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/>INT16,</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/>UINT16,</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/>BF16,</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/>FP16,</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/>FLOAT32,</highlight></codeline>
<codeline lineno="54"><highlight class="normal">};</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="keyword">enum<sp/>class</highlight><highlight class="normal"><sp/>MemoryLayout<sp/>{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/>UNKNOWN,</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/>NHW,</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/>NHWC,</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/>NCHW,</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/>NHWC4,</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/>NC4HW4,</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/>NC8HW8,</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/>HCWNC4,</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/>HCWNC8,</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/>GENERIC,</highlight></codeline>
<codeline lineno="87"><highlight class="normal">};</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="keyword">enum<sp/>class</highlight><highlight class="normal"><sp/>MemoryType<sp/>{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/>UNKNOWN,</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/>DEVICE,</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/>HOST,</highlight></codeline>
<codeline lineno="103"><highlight class="normal">};</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="keyword">enum<sp/>class</highlight><highlight class="normal"><sp/>TensorDirection<sp/>{<sp/>INPUT,<sp/>OUTPUT<sp/>};</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="keyword">enum<sp/>class</highlight><highlight class="normal"><sp/>TensorType<sp/>{<sp/>CPU,<sp/>HW<sp/>};</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="172" refid="structvart_1_1_npu_tensor_info" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structvart_1_1_npu_tensor_info" kindref="compound">NpuTensorInfo</ref><sp/>{</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="structvart_1_1_npu_tensor_info_1ab74e6bf80237ddc4109968cedc58c151" kindref="member">name</ref>;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/>DataType<sp/><ref refid="structvart_1_1_npu_tensor_info_1ac2ad7f431e3446fddcd9b6b9f93c4c14" kindref="member">data_type</ref>;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/>MemoryLayout<sp/><ref refid="structvart_1_1_npu_tensor_info_1aeb6b90acb33f1d77b2974f6cf5e505ea" kindref="member">memory_layout</ref>;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/>std::vector&lt;uint32_t&gt;<sp/><ref refid="structvart_1_1_npu_tensor_info_1ae4a44cd3721e0c607925c4fb88e93360" kindref="member">memory_layout_order</ref>;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="structvart_1_1_npu_tensor_info_1aa3d6656320f1a7278c0c2c7fdf07617c" kindref="member">size</ref>;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="structvart_1_1_npu_tensor_info_1ad5a02330f66e8f949f78c456e0686a51" kindref="member">size_in_bytes</ref>;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/>std::vector&lt;uint32_t&gt;<sp/><ref refid="structvart_1_1_npu_tensor_info_1a45cde9abb508c62d67c3bb2b9bf566a5" kindref="member">shape</ref>;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/>std::vector&lt;uint32_t&gt;<sp/><ref refid="structvart_1_1_npu_tensor_info_1a815021df904d32a73e6c8a8d1bdd7064" kindref="member">strides</ref>;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structvart_1_1_npu_tensor_info_1acd0f82d3c49b8a5dd436d4003c44b713" kindref="member">print</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="183"><highlight class="normal">};</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="195" refid="classvart_1_1_npu_tensor" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classvart_1_1_npu_tensor" kindref="compound">NpuTensor</ref><sp/>{</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><ref refid="classvart_1_1_npu_tensor" kindref="compound">NpuTensor</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structvart_1_1_npu_tensor_info" kindref="compound">NpuTensorInfo</ref>&amp;<sp/>info,</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>buffer,</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MemoryType&amp;<sp/>mem_type,</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TensorType&amp;<sp/>type<sp/>=<sp/>TensorType::CPU);</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><ref refid="classvart_1_1_npu_tensor" kindref="compound">NpuTensor</ref>()<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Disable<sp/>default<sp/>constructor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><ref refid="classvart_1_1_npu_tensor" kindref="compound">NpuTensor</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classvart_1_1_npu_tensor" kindref="compound">NpuTensor</ref>&amp;<sp/>other)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;<sp/><sp/></highlight><highlight class="comment">//<sp/>Disable<sp/>copy<sp/>constructor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><ref refid="classvart_1_1_npu_tensor" kindref="compound">NpuTensor</ref>&amp;<sp/>operator=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classvart_1_1_npu_tensor" kindref="compound">NpuTensor</ref>&amp;<sp/>other)<sp/>=</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;<sp/><sp/></highlight><highlight class="comment">//<sp/>Disable<sp/>copy<sp/>assignment</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><ref refid="classvart_1_1_npu_tensor" kindref="compound">NpuTensor</ref>(<ref refid="classvart_1_1_npu_tensor" kindref="compound">NpuTensor</ref>&amp;&amp;<sp/>other)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Move<sp/>constructor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><ref refid="classvart_1_1_npu_tensor" kindref="compound">NpuTensor</ref>&amp;<sp/>operator=(<ref refid="classvart_1_1_npu_tensor" kindref="compound">NpuTensor</ref>&amp;&amp;<sp/>other)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal">;<sp/><sp/></highlight><highlight class="comment">//<sp/>Move<sp/>assignment</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="classvart_1_1_npu_tensor_1a6ecb12c0d8a1f0586b9072995ec48e07" kindref="member">get_buffer</ref>(MemoryType<sp/>mem_type)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structvart_1_1_npu_tensor_info" kindref="compound">NpuTensorInfo</ref>&amp;<sp/><ref refid="classvart_1_1_npu_tensor_1a27f7459a75c1917dc0e4e36edc6fcfc8" kindref="member">get_info</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/>TensorType<sp/><ref refid="classvart_1_1_npu_tensor_1a0e786197c614a0aa7f38f91d024af6dc" kindref="member">get_tensor_type</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/>MemoryType<sp/><ref refid="classvart_1_1_npu_tensor_1a73ba908190729e802faab40f810c6381" kindref="member">get_memory_type</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classvart_1_1_npu_tensor_1a8c1584b58fcbef5c95d26385aaa35797" kindref="member">print_info</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><ref refid="structvart_1_1_npu_tensor_info" kindref="compound">NpuTensorInfo</ref><sp/>info_;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Tensor<sp/>metadata</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>buffer_;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Pointer<sp/>to<sp/>the<sp/>buffer<sp/>memory<sp/>(host<sp/>or<sp/>device)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/>MemoryType<sp/>memory_type_;<sp/><sp/></highlight><highlight class="comment">//<sp/>Memory<sp/>type<sp/>(HOST<sp/>or<sp/>DEVICE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/>TensorType<sp/>type_;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Tensor<sp/>type<sp/>(CPU<sp/>or<sp/>HW)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal">};</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>vart</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="cppdoc/vart_npu_tensor.hpp"/>
  </compounddef>
</doxygen>
